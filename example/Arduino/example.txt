#include <hekr_protocol.h>
u8 temp;
u8 RecvBuffer[20];

/*********************HEKR USER API*********************/

/*******************************************************/
//#define USER_MAX_LEN 0x64u
//使用前要确定用户所需要的最大数组 默认为100 大于100需要自行修改
//数组大小可以自行修改为最长长度  
//如果有多条不等长命令  取最长长度  为用户数据长度  非整帧长度
/*******************************************************/


/*******************************************************/
//void HekrInit(void (*fun)(unsigned char));
//eg:  HekrInit(UART_SendChar);   
//HekrInit函数:
//传入参数为用户串口发送一个byte函数的函数名
//Hekr 协议初始化
//使用Hekr协议前需完成初始化
//初始化需要用户有串口发送一个byte的程序
/*******************************************************/


/*******************************************************/
//eg:  void UART_SendChar(u8 ch); 传输参数必须只是一个8bit的数
//     该函数需要用户自行在程序中定义
/*******************************************************/


/*******************************************************/
//unsigned char HekrRecvDataHandle(unsigned char* data);
//串口数据接收处理
//返回值见头文件 RecvDataHandleCode
//数据保存在对应数组中 valid_data 和 ModuleStatus 指针
//模块状态值保存在module_status数组中
/*******************************************************/


/*******************************************************/
//void HekrValidDataUpload(unsigned char len);
//上传用户有效数据
//数据存放在valid_data数组中，len 为用户数据长度，非整帧长度
/*******************************************************/


//协议修改日期 2016.06.23 
//协议网址  http://docs.hekr.me/v4/resourceDownload/protocol/uart/
//BUG 反馈  zejun.zhao@hekr.me
//					387606503@qq.com
/*******************************************************/

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  HekrInit(SendChar);
  HekrModuleControl(HekrConfig);
}

void loop() {
  GetData();
  DataHandle();
}


void SendChar(unsigned char ch)
{
  Serial.write(ch);
  delay(2);
}

void GetData(void)
{
  u8 i = 0;
  while(Serial.available())
  {
    RecvBuffer[i++] = Serial.read();
    if(RecvBuffer[0] != 0x48)
      i = 0;
    delay(2);  
  }
}
//*************************************************************************
//HekrRecvDataHandle  函数返回值
//typedef  enum
//{
//  RecvDataSumCheckErr = 0x01,
//  LastFrameSendErr = 0x02,
//  MCU_UploadACK = 0x03,
//  ValidDataUpdate = 0x04,
//  RecvDataUseless = 0x05,
//  HekrModuleStateUpdate = 0x06,
//  MCU_ControlModuleACK = 0x07
//}RecvDataHandleCode;
//*************************************************************************
void DataHandle(void)
{
  if(RecvBuffer[0] == HEKR_FRAME_HEADER)
  {
    temp = HekrRecvDataHandle(RecvBuffer);
    RecvBuffer[0] = 0x00;
    if(ValidDataUpdate == temp)
    {
      //接收的数据保存在 valid_data 数组里
      //User Code
      SendChar(valid_data[0]);
    }
    if(HekrModuleStateUpdate == temp)
    {
      //接收的数据保存在 ModuleStatus 指针里
      //User Code.
      SendChar(ModuleStatus->CMD);
    }
  }
}
